[
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "fake",
        "importPath": "lib.helpers.generator",
        "description": "lib.helpers.generator",
        "isExtraImport": true,
        "detail": "lib.helpers.generator",
        "documentation": {}
    },
    {
        "label": "fake",
        "importPath": "lib.helpers.generator",
        "description": "lib.helpers.generator",
        "isExtraImport": true,
        "detail": "lib.helpers.generator",
        "documentation": {}
    },
    {
        "label": "fake",
        "importPath": "lib.helpers.generator",
        "description": "lib.helpers.generator",
        "isExtraImport": true,
        "detail": "lib.helpers.generator",
        "documentation": {}
    },
    {
        "label": "fake",
        "importPath": "lib.helpers.generator",
        "description": "lib.helpers.generator",
        "isExtraImport": true,
        "detail": "lib.helpers.generator",
        "documentation": {}
    },
    {
        "label": "fake",
        "importPath": "lib.helpers.generator",
        "description": "lib.helpers.generator",
        "isExtraImport": true,
        "detail": "lib.helpers.generator",
        "documentation": {}
    },
    {
        "label": "fake",
        "importPath": "lib.helpers.generator",
        "description": "lib.helpers.generator",
        "isExtraImport": true,
        "detail": "lib.helpers.generator",
        "documentation": {}
    },
    {
        "label": "fake",
        "importPath": "lib.helpers.generator",
        "description": "lib.helpers.generator",
        "isExtraImport": true,
        "detail": "lib.helpers.generator",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "binascii",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "binascii",
        "description": "binascii",
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "KafkaProducer",
        "importPath": "kafka",
        "description": "kafka",
        "isExtraImport": true,
        "detail": "kafka",
        "documentation": {}
    },
    {
        "label": "pika",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pika",
        "description": "pika",
        "detail": "pika",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "paho.mqtt",
        "description": "paho.mqtt",
        "isExtraImport": true,
        "detail": "paho.mqtt",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "generate",
        "importPath": "lib.generate",
        "description": "lib.generate",
        "isExtraImport": true,
        "detail": "lib.generate",
        "documentation": {}
    },
    {
        "label": "generate",
        "importPath": "lib.generate",
        "description": "lib.generate",
        "isExtraImport": true,
        "detail": "lib.generate",
        "documentation": {}
    },
    {
        "label": "guid",
        "importPath": "lib.helpers.guid",
        "description": "lib.helpers.guid",
        "isExtraImport": true,
        "detail": "lib.helpers.guid",
        "documentation": {}
    },
    {
        "label": "Device",
        "importPath": "models.models",
        "description": "models.models",
        "isExtraImport": true,
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "KafkaDestination",
        "importPath": "models.models",
        "description": "models.models",
        "isExtraImport": true,
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "MqttDestination",
        "importPath": "models.models",
        "description": "models.models",
        "isExtraImport": true,
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "RabbitMQDestination",
        "importPath": "models.models",
        "description": "models.models",
        "isExtraImport": true,
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "Device",
        "importPath": "models.models",
        "description": "models.models",
        "isExtraImport": true,
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "KafkaDestination",
        "importPath": "models.models",
        "description": "models.models",
        "isExtraImport": true,
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "RabbitMQDestination",
        "importPath": "models.models",
        "description": "models.models",
        "isExtraImport": true,
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "MqttDestination",
        "importPath": "models.models",
        "description": "models.models",
        "isExtraImport": true,
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "jsons",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jsons",
        "description": "jsons",
        "detail": "jsons",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "city",
        "importPath": "lib.helpers.city",
        "description": "lib.helpers.city",
        "isExtraImport": true,
        "detail": "lib.helpers.city",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "v1",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "table_devices",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "running_devices",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "table_destinations",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "add_pagination",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "paginate",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "TinyDB",
        "importPath": "tinydb",
        "description": "tinydb",
        "isExtraImport": true,
        "detail": "tinydb",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "tinydb",
        "description": "tinydb",
        "isExtraImport": true,
        "detail": "tinydb",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "tinydb.table",
        "description": "tinydb.table",
        "isExtraImport": true,
        "detail": "tinydb.table",
        "documentation": {}
    },
    {
        "label": "Kafka",
        "importPath": "lib.producer.producer",
        "description": "lib.producer.producer",
        "isExtraImport": true,
        "detail": "lib.producer.producer",
        "documentation": {}
    },
    {
        "label": "RabbitMQ",
        "importPath": "lib.producer.producer",
        "description": "lib.producer.producer",
        "isExtraImport": true,
        "detail": "lib.producer.producer",
        "documentation": {}
    },
    {
        "label": "MQTT",
        "importPath": "lib.producer.producer",
        "description": "lib.producer.producer",
        "isExtraImport": true,
        "detail": "lib.producer.producer",
        "documentation": {}
    },
    {
        "label": "running_devices",
        "importPath": "lib.producer.producer",
        "description": "lib.producer.producer",
        "isExtraImport": true,
        "detail": "lib.producer.producer",
        "documentation": {}
    },
    {
        "label": "bool",
        "kind": 2,
        "importPath": "src.api.lib.helpers.bool",
        "description": "src.api.lib.helpers.bool",
        "peekOfCode": "def bool():\n    return random.randint(0, 10) % 2 == 0",
        "detail": "src.api.lib.helpers.bool",
        "documentation": {}
    },
    {
        "label": "choice",
        "kind": 2,
        "importPath": "src.api.lib.helpers.choice",
        "description": "src.api.lib.helpers.choice",
        "peekOfCode": "def choice(lst):\n    return random.choice(lst)",
        "detail": "src.api.lib.helpers.choice",
        "documentation": {}
    },
    {
        "label": "city",
        "kind": 2,
        "importPath": "src.api.lib.helpers.city",
        "description": "src.api.lib.helpers.city",
        "peekOfCode": "def city():\n    return fake.city()",
        "detail": "src.api.lib.helpers.city",
        "documentation": {}
    },
    {
        "label": "company",
        "kind": 2,
        "importPath": "src.api.lib.helpers.company",
        "description": "src.api.lib.helpers.company",
        "peekOfCode": "def company():\n    return fake.company()",
        "detail": "src.api.lib.helpers.company",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 2,
        "importPath": "src.api.lib.helpers.email",
        "description": "src.api.lib.helpers.email",
        "peekOfCode": "def email():\n    return fake.email()",
        "detail": "src.api.lib.helpers.email",
        "documentation": {}
    },
    {
        "label": "first_name",
        "kind": 2,
        "importPath": "src.api.lib.helpers.first_name",
        "description": "src.api.lib.helpers.first_name",
        "peekOfCode": "def first_name():\n    return fake.first_name()",
        "detail": "src.api.lib.helpers.first_name",
        "documentation": {}
    },
    {
        "label": "floating",
        "kind": 2,
        "importPath": "src.api.lib.helpers.floating",
        "description": "src.api.lib.helpers.floating",
        "peekOfCode": "def floating(min, max, decimal=2):  # ToDo: , pattern):\n    return round(random.uniform(min, max), decimal)",
        "detail": "src.api.lib.helpers.floating",
        "documentation": {}
    },
    {
        "label": "gender",
        "kind": 2,
        "importPath": "src.api.lib.helpers.gender",
        "description": "src.api.lib.helpers.gender",
        "peekOfCode": "def gender():\n    return 'male' if randint(0, 10) % 2 else 'female'",
        "detail": "src.api.lib.helpers.gender",
        "documentation": {}
    },
    {
        "label": "fake",
        "kind": 5,
        "importPath": "src.api.lib.helpers.generator",
        "description": "src.api.lib.helpers.generator",
        "peekOfCode": "fake = Faker()",
        "detail": "src.api.lib.helpers.generator",
        "documentation": {}
    },
    {
        "label": "guid",
        "kind": 2,
        "importPath": "src.api.lib.helpers.guid",
        "description": "src.api.lib.helpers.guid",
        "peekOfCode": "def guid():\n    return str(uuid.uuid4())",
        "detail": "src.api.lib.helpers.guid",
        "documentation": {}
    },
    {
        "label": "integer",
        "kind": 2,
        "importPath": "src.api.lib.helpers.integer",
        "description": "src.api.lib.helpers.integer",
        "peekOfCode": "def integer(min=0, max=10):\n    return random.randint(min, max)",
        "detail": "src.api.lib.helpers.integer",
        "documentation": {}
    },
    {
        "label": "last_name",
        "kind": 2,
        "importPath": "src.api.lib.helpers.last_name",
        "description": "src.api.lib.helpers.last_name",
        "peekOfCode": "def last_name():\n    return fake.last_name()",
        "detail": "src.api.lib.helpers.last_name",
        "documentation": {}
    },
    {
        "label": "lorem",
        "kind": 2,
        "importPath": "src.api.lib.helpers.lorem",
        "description": "src.api.lib.helpers.lorem",
        "peekOfCode": "def lorem(count=1, unites='sentences'):\n    assert 'ToDo: must be implement!'",
        "detail": "src.api.lib.helpers.lorem",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 2,
        "importPath": "src.api.lib.helpers.name",
        "description": "src.api.lib.helpers.name",
        "peekOfCode": "def name():\n    return fake.name()",
        "detail": "src.api.lib.helpers.name",
        "documentation": {}
    },
    {
        "label": "object_id",
        "kind": 2,
        "importPath": "src.api.lib.helpers.object_id",
        "description": "src.api.lib.helpers.object_id",
        "peekOfCode": "def object_id():\n    timestamp = '{0:x}'.format(int(time.time()))\n    rest = binascii.b2a_hex(os.urandom(8)).decode('ascii')\n    return timestamp + rest",
        "detail": "src.api.lib.helpers.object_id",
        "documentation": {}
    },
    {
        "label": "phone",
        "kind": 2,
        "importPath": "src.api.lib.helpers.phone",
        "description": "src.api.lib.helpers.phone",
        "peekOfCode": "def phone():\n    n = '0000000000'\n    while '9' in n[3:6] or n[3:6] == '000' or n[6] == n[7] == n[8] == n[9]:\n        n = str(random.randint(10 ** 9, 10 ** 10 - 1))\n    return n[:3] + '-' + n[3:6] + '-' + n[6:]",
        "detail": "src.api.lib.helpers.phone",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 2,
        "importPath": "src.api.lib.helpers.state",
        "description": "src.api.lib.helpers.state",
        "peekOfCode": "def state():\n    return fake.state()",
        "detail": "src.api.lib.helpers.state",
        "documentation": {}
    },
    {
        "label": "Producer",
        "kind": 6,
        "importPath": "src.api.lib.producer.producer",
        "description": "src.api.lib.producer.producer",
        "peekOfCode": "class Producer(Thread):\n    def __init__(self, device:Device, metadata, publish_action):\n        Thread.__init__(self)\n        self.stop = False\n        self.name = device['name']\n        self.device = device\n        self.metadata = jsons.dump(metadata)\n        self.publish_action = publish_action\n    def run(self):\n        try:",
        "detail": "src.api.lib.producer.producer",
        "documentation": {}
    },
    {
        "label": "Kafka",
        "kind": 6,
        "importPath": "src.api.lib.producer.producer",
        "description": "src.api.lib.producer.producer",
        "peekOfCode": "class Kafka(Producer):\n    def __init__(self, device:Device, destination, metadata):\n        self.destination = destination\n        self.producer = KafkaProducer(\n        bootstrap_servers=f\"{destination['server']}:{destination['port']}\",\n        value_serializer=lambda v: json.dumps(v).encode(\"utf-8\"))\n        super().__init__(device,metadata,self.publish)\n    def publish(self, payload):\n        self.producer.send(self.destination['topic'],payload)\nclass RabbitMQ(Producer):",
        "detail": "src.api.lib.producer.producer",
        "documentation": {}
    },
    {
        "label": "RabbitMQ",
        "kind": 6,
        "importPath": "src.api.lib.producer.producer",
        "description": "src.api.lib.producer.producer",
        "peekOfCode": "class RabbitMQ(Producer):\n    def __init__(self, device:Device, destination, metadata):\n        self.destination = destination\n        credentials = pika.PlainCredentials(destination['username'], destination['password'])\n        parameters = pika.ConnectionParameters(destination['server'],destination['port'],'/',credentials)\n        connection = pika.BlockingConnection(parameters)\n        self.channel = connection.channel()\n        if destination['queue'] != None:\n            self.channel.queue_declare(queue=destination['queue'])\n        super().__init__(device,metadata,self.publish)",
        "detail": "src.api.lib.producer.producer",
        "documentation": {}
    },
    {
        "label": "MQTT",
        "kind": 6,
        "importPath": "src.api.lib.producer.producer",
        "description": "src.api.lib.producer.producer",
        "peekOfCode": "class MQTT(Producer):\n    def __init__(self, device:Device, destination, metadata):\n        def on_connect(client, userdata, flags, rc):\n            if rc == 0:\n                print(\"Connected to MQTT Broker!\")\n            else:\n                print(\"Failed to connect, return code %d\\n\", rc)\n        self.destination = destination\n        self.client = mqtt_client.Client(guid())\n        if destination['username']!=None and destination['password']!=None:",
        "detail": "src.api.lib.producer.producer",
        "documentation": {}
    },
    {
        "label": "running_devices",
        "kind": 5,
        "importPath": "src.api.lib.producer.producer",
        "description": "src.api.lib.producer.producer",
        "peekOfCode": "running_devices = {}\nclass Producer(Thread):\n    def __init__(self, device:Device, metadata, publish_action):\n        Thread.__init__(self)\n        self.stop = False\n        self.name = device['name']\n        self.device = device\n        self.metadata = jsons.dump(metadata)\n        self.publish_action = publish_action\n    def run(self):",
        "detail": "src.api.lib.producer.producer",
        "documentation": {}
    },
    {
        "label": "generate",
        "kind": 2,
        "importPath": "src.api.lib.generate",
        "description": "src.api.lib.generate",
        "peekOfCode": "def generate(template):\n    \"\"\"A really useful function.\n        Returns None\n        \"\"\"\n    if type(template) == dict:\n        obj = {}\n        for i in template.keys():\n            regex = r\"^.+\\|optional$\"\n            matches = re.match(regex, i)\n            if matches is not None:  # Optional",
        "detail": "src.api.lib.generate",
        "documentation": {}
    },
    {
        "label": "Device",
        "kind": 6,
        "importPath": "src.api.models.models",
        "description": "src.api.models.models",
        "peekOfCode": "class Device(BaseModel):\n    name: str\n    frequency_s: int\n    messages:int\n    timestamp_label: str = 'timestamp'\n    auto_start: bool\n    data_destination: str\nclass DataDestination(BaseModel):\n    name:str\n    server:str",
        "detail": "src.api.models.models",
        "documentation": {}
    },
    {
        "label": "DataDestination",
        "kind": 6,
        "importPath": "src.api.models.models",
        "description": "src.api.models.models",
        "peekOfCode": "class DataDestination(BaseModel):\n    name:str\n    server:str\n    port:int\nclass PubSubDestination(DataDestination):\n    topic:str\nclass KafkaDestination(PubSubDestination):\n    port:int = 9092\nclass RabbitMQDestination(DataDestination):\n    exchange:str = ''",
        "detail": "src.api.models.models",
        "documentation": {}
    },
    {
        "label": "PubSubDestination",
        "kind": 6,
        "importPath": "src.api.models.models",
        "description": "src.api.models.models",
        "peekOfCode": "class PubSubDestination(DataDestination):\n    topic:str\nclass KafkaDestination(PubSubDestination):\n    port:int = 9092\nclass RabbitMQDestination(DataDestination):\n    exchange:str = ''\n    routing_key:str\n    queue:str = None\n    port:int = 5672\n    username:str = 'guest'",
        "detail": "src.api.models.models",
        "documentation": {}
    },
    {
        "label": "KafkaDestination",
        "kind": 6,
        "importPath": "src.api.models.models",
        "description": "src.api.models.models",
        "peekOfCode": "class KafkaDestination(PubSubDestination):\n    port:int = 9092\nclass RabbitMQDestination(DataDestination):\n    exchange:str = ''\n    routing_key:str\n    queue:str = None\n    port:int = 5672\n    username:str = 'guest'\n    password:str = 'guest'\nclass MqttDestination(PubSubDestination):",
        "detail": "src.api.models.models",
        "documentation": {}
    },
    {
        "label": "RabbitMQDestination",
        "kind": 6,
        "importPath": "src.api.models.models",
        "description": "src.api.models.models",
        "peekOfCode": "class RabbitMQDestination(DataDestination):\n    exchange:str = ''\n    routing_key:str\n    queue:str = None\n    port:int = 5672\n    username:str = 'guest'\n    password:str = 'guest'\nclass MqttDestination(PubSubDestination):\n    port:int = 1883\n    username:str = None",
        "detail": "src.api.models.models",
        "documentation": {}
    },
    {
        "label": "MqttDestination",
        "kind": 6,
        "importPath": "src.api.models.models",
        "description": "src.api.models.models",
        "peekOfCode": "class MqttDestination(PubSubDestination):\n    port:int = 1883\n    username:str = None\n    password:str = None",
        "detail": "src.api.models.models",
        "documentation": {}
    },
    {
        "label": "test_device_sequence",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def test_device_sequence():\n    \"\"\" Runs testing sequence \"\"\"\n    for dest in destinations:\n        path = os.path.normpath(dest)\n        producer = path.split(os.sep)[1]\n        destination = json.load(open(f\"./templates/{producer}/destination.json\"))\n        device = json.load(open(f\"./templates/{producer}/device.json\"))\n        metadata = json.load(open(f\"./templates/{producer}/metadata.json\"))\n        delete_destinations()\n        delete_devices()",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "get_devices",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def get_devices():\n    \"\"\" Tests GET all devices endpoint \"\"\"\n    response = client.get(\"/api/v1/devices\")\n    assert response.status_code == 200\n    resp = response.json()\n    assert len(resp[\"items\"]) == resp[\"total\"]\ndef delete_devices():\n    \"\"\" Tests DELETE all devices endpoint \"\"\"\n    response = client.delete(\"/api/v1/devices\")\n    assert response.status_code == 200",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "delete_devices",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def delete_devices():\n    \"\"\" Tests DELETE all devices endpoint \"\"\"\n    response = client.delete(\"/api/v1/devices\")\n    assert response.status_code == 200\n    assert len(table_devices.all()) == 0\ndef get_running_devices():\n    response = client.get(\"/api/v1/devices/running\")\n    assert response.status_code == 200\n    #assert response.json()['items'][0] == config\ndef start_all_devices():",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "get_running_devices",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def get_running_devices():\n    response = client.get(\"/api/v1/devices/running\")\n    assert response.status_code == 200\n    #assert response.json()['items'][0] == config\ndef start_all_devices():\n    response = client.put(\"/api/v1/devices/start\")\n    assert response.status_code == 202\n    assert len(running_devices) > 0\ndef stop_all_devices():\n    response = client.put(\"/api/v1/devices/stop\")",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "start_all_devices",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def start_all_devices():\n    response = client.put(\"/api/v1/devices/start\")\n    assert response.status_code == 202\n    assert len(running_devices) > 0\ndef stop_all_devices():\n    response = client.put(\"/api/v1/devices/stop\")\n    assert response.status_code == 202\n    assert len(running_devices) == 0\ndef delete_destinations():\n    \"\"\" Tests DELETE all destinations \"\"\"",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "stop_all_devices",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def stop_all_devices():\n    response = client.put(\"/api/v1/devices/stop\")\n    assert response.status_code == 202\n    assert len(running_devices) == 0\ndef delete_destinations():\n    \"\"\" Tests DELETE all destinations \"\"\"\n    response = client.delete(\"/api/v1/destinations\")\n    assert response.status_code == 200\n    assert len(table_destinations.all()) == 0\ndef get_data_destination(name, destination):",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "delete_destinations",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def delete_destinations():\n    \"\"\" Tests DELETE all destinations \"\"\"\n    response = client.delete(\"/api/v1/destinations\")\n    assert response.status_code == 200\n    assert len(table_destinations.all()) == 0\ndef get_data_destination(name, destination):\n    response = client.get(f\"/api/v1/destination/{destination['name']}\")\n    destination['type'] = name\n    assert response.status_code == 200\n    assert response.json()['name'] == destination['name']",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "get_data_destination",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def get_data_destination(name, destination):\n    response = client.get(f\"/api/v1/destination/{destination['name']}\")\n    destination['type'] = name\n    assert response.status_code == 200\n    assert response.json()['name'] == destination['name']\ndef add_data_destination(name, destination):\n    \"\"\" Tests Add destination \"\"\"\n    response = client.post(f\"/api/v1/destination/{name}\", json=destination)\n    assert response.status_code == 201\n    assert response.json()['name'] == destination['name']",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "add_data_destination",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def add_data_destination(name, destination):\n    \"\"\" Tests Add destination \"\"\"\n    response = client.post(f\"/api/v1/destination/{name}\", json=destination)\n    assert response.status_code == 201\n    assert response.json()['name'] == destination['name']\ndef delete_data_destination(destination):\n    response = client.delete(f\"/api/v1/destination/{destination['name']}\")\n    assert response.status_code == 200\n    #assert not any(item for item in response.json() if item['name'] == name)\ndef delete_inexistent_data_destination(destination):",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "delete_data_destination",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def delete_data_destination(destination):\n    response = client.delete(f\"/api/v1/destination/{destination['name']}\")\n    assert response.status_code == 200\n    #assert not any(item for item in response.json() if item['name'] == name)\ndef delete_inexistent_data_destination(destination):\n    response = client.delete(f\"/api/v1/destination/{destination['name']}\")\n    assert response.status_code == 404\n    #assert not any(item for item in response.json() if item['name'] == name)\ndef add_device(device):\n    \"\"\" Tests Add device \"\"\"",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "delete_inexistent_data_destination",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def delete_inexistent_data_destination(destination):\n    response = client.delete(f\"/api/v1/destination/{destination['name']}\")\n    assert response.status_code == 404\n    #assert not any(item for item in response.json() if item['name'] == name)\ndef add_device(device):\n    \"\"\" Tests Add device \"\"\"\n    response = client.post(\"/api/v1/device\", json=device)\n    assert response.status_code == 201\n    assert response.json() == device\ndef add_device_no_destination(device):",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "add_device",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def add_device(device):\n    \"\"\" Tests Add device \"\"\"\n    response = client.post(\"/api/v1/device\", json=device)\n    assert response.status_code == 201\n    assert response.json() == device\ndef add_device_no_destination(device):\n    \"\"\" Tests Add device with no destination\"\"\"\n    response = client.post(\"/api/v1/device\", json=device)\n    assert response.status_code == 404\n    assert response.json() == {\"detail\":f\"The data destination {device['name']} does not exists.\"}",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "add_device_no_destination",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def add_device_no_destination(device):\n    \"\"\" Tests Add device with no destination\"\"\"\n    response = client.post(\"/api/v1/device\", json=device)\n    assert response.status_code == 404\n    assert response.json() == {\"detail\":f\"The data destination {device['name']} does not exists.\"}\ndef add_device_bad_body():\n    \"\"\" Tests Add device with bad body\"\"\"\n    response = client.post(\"/api/v1/device\", json={})\n    assert response.status_code == 422\ndef get_device(device):",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "add_device_bad_body",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def add_device_bad_body():\n    \"\"\" Tests Add device with bad body\"\"\"\n    response = client.post(\"/api/v1/device\", json={})\n    assert response.status_code == 422\ndef get_device(device):\n    \"\"\" Tests Get device \"\"\"\n    response = client.get(f\"/api/v1/device/{device['name']}\")\n    assert response.status_code == 200\n    assert response.json() == device\ndef delete_device(device):",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "get_device",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def get_device(device):\n    \"\"\" Tests Get device \"\"\"\n    response = client.get(f\"/api/v1/device/{device['name']}\")\n    assert response.status_code == 200\n    assert response.json() == device\ndef delete_device(device):\n    \"\"\" Tests Delete device \"\"\"\n    response = client.delete(f\"/api/v1/device/{device['name']}\")\n    assert response.status_code == 200\n    #assert not any(item for item in response.json() if item['items']['name'] == name)",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "delete_device",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def delete_device(device):\n    \"\"\" Tests Delete device \"\"\"\n    response = client.delete(f\"/api/v1/device/{device['name']}\")\n    assert response.status_code == 200\n    #assert not any(item for item in response.json() if item['items']['name'] == name)\ndef start_device(device):\n    \"\"\" Tests start device \"\"\"\n    response = client.put(f\"/api/v1/device/{device['name']}/start\")\n    assert response.status_code == 202\n    assert device['name'] in running_devices",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "start_device",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def start_device(device):\n    \"\"\" Tests start device \"\"\"\n    response = client.put(f\"/api/v1/device/{device['name']}/start\")\n    assert response.status_code == 202\n    assert device['name'] in running_devices\ndef stop_device(device):\n    \"\"\" Tests Stop device \"\"\"\n    response = client.put(f\"/api/v1/device/{device['name']}/stop\")\n    assert response.status_code == 202\n    assert device['name'] not in running_devices",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "stop_device",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def stop_device(device):\n    \"\"\" Tests Stop device \"\"\"\n    response = client.put(f\"/api/v1/device/{device['name']}/stop\")\n    assert response.status_code == 202\n    assert device['name'] not in running_devices\ndef get_inexistent_device(device):\n    \"\"\" Tests Get inexistent device \"\"\"\n    response = client.get(f\"/api/v1/device/{device['name']}\")\n    assert response.status_code == 404\ndef delete_inexistent_device(device):",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "get_inexistent_device",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def get_inexistent_device(device):\n    \"\"\" Tests Get inexistent device \"\"\"\n    response = client.get(f\"/api/v1/device/{device['name']}\")\n    assert response.status_code == 404\ndef delete_inexistent_device(device):\n    \"\"\" Tests Delete inexistent device \"\"\"\n    response = client.delete(f\"/api/v1/device/{device['name']}\")\n    assert response.status_code == 404\ndef add_metadata(device, metadata):\n    \"\"\" Tests Add metadata to device \"\"\"",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "delete_inexistent_device",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def delete_inexistent_device(device):\n    \"\"\" Tests Delete inexistent device \"\"\"\n    response = client.delete(f\"/api/v1/device/{device['name']}\")\n    assert response.status_code == 404\ndef add_metadata(device, metadata):\n    \"\"\" Tests Add metadata to device \"\"\"\n    response = client.put(f\"/api/v1/device/{device['name']}/metadata\", json=metadata)\n    assert response.status_code == 201\n    assert response.json() == metadata\ndef get_metadata(device, metadata):",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "add_metadata",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def add_metadata(device, metadata):\n    \"\"\" Tests Add metadata to device \"\"\"\n    response = client.put(f\"/api/v1/device/{device['name']}/metadata\", json=metadata)\n    assert response.status_code == 201\n    assert response.json() == metadata\ndef get_metadata(device, metadata):\n    \"\"\" Tests Get metadata of device \"\"\"\n    response = client.get(f\"/api/v1/device/{device['name']}/metadata\")\n    assert response.status_code == 200\n    assert response.json() == metadata",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "get_metadata",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def get_metadata(device, metadata):\n    \"\"\" Tests Get metadata of device \"\"\"\n    response = client.get(f\"/api/v1/device/{device['name']}/metadata\")\n    assert response.status_code == 200\n    assert response.json() == metadata\ndef delete_metadata(device):\n    \"\"\" Tests Delete metadata to device \"\"\"\n    response = client.delete(f\"/api/v1/device/{device['name']}/metadata\")\n    assert response.status_code == 200\ndef get_inexistent_metadata(device):",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "delete_metadata",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def delete_metadata(device):\n    \"\"\" Tests Delete metadata to device \"\"\"\n    response = client.delete(f\"/api/v1/device/{device['name']}/metadata\")\n    assert response.status_code == 200\ndef get_inexistent_metadata(device):\n    \"\"\" Tests Get inexistent metadata of device \"\"\"\n    response = client.get(f\"/api/v1/device/{device['name']}/metadata\")\n    assert response.status_code == 404\ndef delete_inexistent_metadata(device):\n    \"\"\" Tests Delete inexistent metadata of device \"\"\"",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "get_inexistent_metadata",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def get_inexistent_metadata(device):\n    \"\"\" Tests Get inexistent metadata of device \"\"\"\n    response = client.get(f\"/api/v1/device/{device['name']}/metadata\")\n    assert response.status_code == 404\ndef delete_inexistent_metadata(device):\n    \"\"\" Tests Delete inexistent metadata of device \"\"\"\n    response = client.delete(f\"/api/v1/device/{device['name']}/metadata\")\n    assert response.status_code == 404\ndef generate_from_metadata(device,metadata):\n    \"\"\" Tests Generate metadata of device \"\"\"",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "delete_inexistent_metadata",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def delete_inexistent_metadata(device):\n    \"\"\" Tests Delete inexistent metadata of device \"\"\"\n    response = client.delete(f\"/api/v1/device/{device['name']}/metadata\")\n    assert response.status_code == 404\ndef generate_from_metadata(device,metadata):\n    \"\"\" Tests Generate metadata of device \"\"\"\n    response = client.get(f\"/api/v1/device/{device['name']}/metadata/generate\")\n    assert response.status_code == 200\n    assert response.json() != metadata\ndef get_metadata_sample():",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "generate_from_metadata",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def generate_from_metadata(device,metadata):\n    \"\"\" Tests Generate metadata of device \"\"\"\n    response = client.get(f\"/api/v1/device/{device['name']}/metadata/generate\")\n    assert response.status_code == 200\n    assert response.json() != metadata\ndef get_metadata_sample():\n    \"\"\" Tests Get metadata sample \"\"\"\n    with open('./samples/sample.json', 'r') as f:\n            s = f.read()\n            response = client.get(\"/api/v1/metadata/sample\")",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "get_metadata_sample",
        "kind": 2,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "def get_metadata_sample():\n    \"\"\" Tests Get metadata sample \"\"\"\n    with open('./samples/sample.json', 'r') as f:\n            s = f.read()\n            response = client.get(\"/api/v1/metadata/sample\")\n            assert response.status_code == 200\n            assert response.json() == json.loads(s)",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "client = TestClient(v1)\ndestinations = glob(\"./templates/*/\", recursive = True)\ndef test_device_sequence():\n    \"\"\" Runs testing sequence \"\"\"\n    for dest in destinations:\n        path = os.path.normpath(dest)\n        producer = path.split(os.sep)[1]\n        destination = json.load(open(f\"./templates/{producer}/destination.json\"))\n        device = json.load(open(f\"./templates/{producer}/device.json\"))\n        metadata = json.load(open(f\"./templates/{producer}/metadata.json\"))",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "destinations",
        "kind": 5,
        "importPath": "src.api.tests.test_devices",
        "description": "src.api.tests.test_devices",
        "peekOfCode": "destinations = glob(\"./templates/*/\", recursive = True)\ndef test_device_sequence():\n    \"\"\" Runs testing sequence \"\"\"\n    for dest in destinations:\n        path = os.path.normpath(dest)\n        producer = path.split(os.sep)[1]\n        destination = json.load(open(f\"./templates/{producer}/destination.json\"))\n        device = json.load(open(f\"./templates/{producer}/device.json\"))\n        metadata = json.load(open(f\"./templates/{producer}/metadata.json\"))\n        delete_destinations()",
        "detail": "src.api.tests.test_devices",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "db = TinyDB('./database/devices.json')\ntable_destinations = db.table('destinations')\ntable_devices = db.table('devices')\ntable_templates = db.table('metadata')\ndevices = Query()\ndestinations = Query()\ntemplates = Query()\nv1 = FastAPI()\nlogger = logging.getLogger(\"v1\")\n@v1.on_event(\"startup\")",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "table_destinations",
        "kind": 5,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "table_destinations = db.table('destinations')\ntable_devices = db.table('devices')\ntable_templates = db.table('metadata')\ndevices = Query()\ndestinations = Query()\ntemplates = Query()\nv1 = FastAPI()\nlogger = logging.getLogger(\"v1\")\n@v1.on_event(\"startup\")\nasync def startup():",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "table_devices",
        "kind": 5,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "table_devices = db.table('devices')\ntable_templates = db.table('metadata')\ndevices = Query()\ndestinations = Query()\ntemplates = Query()\nv1 = FastAPI()\nlogger = logging.getLogger(\"v1\")\n@v1.on_event(\"startup\")\nasync def startup():\n    autostart = table_devices.search(devices.auto_start == True)",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "table_templates",
        "kind": 5,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "table_templates = db.table('metadata')\ndevices = Query()\ndestinations = Query()\ntemplates = Query()\nv1 = FastAPI()\nlogger = logging.getLogger(\"v1\")\n@v1.on_event(\"startup\")\nasync def startup():\n    autostart = table_devices.search(devices.auto_start == True)\n    for device in autostart:",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "devices",
        "kind": 5,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "devices = Query()\ndestinations = Query()\ntemplates = Query()\nv1 = FastAPI()\nlogger = logging.getLogger(\"v1\")\n@v1.on_event(\"startup\")\nasync def startup():\n    autostart = table_devices.search(devices.auto_start == True)\n    for device in autostart:\n        try:",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "destinations",
        "kind": 5,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "destinations = Query()\ntemplates = Query()\nv1 = FastAPI()\nlogger = logging.getLogger(\"v1\")\n@v1.on_event(\"startup\")\nasync def startup():\n    autostart = table_devices.search(devices.auto_start == True)\n    for device in autostart:\n        try:\n            await __start_device(device['name'])",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "templates",
        "kind": 5,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "templates = Query()\nv1 = FastAPI()\nlogger = logging.getLogger(\"v1\")\n@v1.on_event(\"startup\")\nasync def startup():\n    autostart = table_devices.search(devices.auto_start == True)\n    for device in autostart:\n        try:\n            await __start_device(device['name'])\n        except Exception as e:",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "v1 = FastAPI()\nlogger = logging.getLogger(\"v1\")\n@v1.on_event(\"startup\")\nasync def startup():\n    autostart = table_devices.search(devices.auto_start == True)\n    for device in autostart:\n        try:\n            await __start_device(device['name'])\n        except Exception as e:\n            logger.error(e)",
        "detail": "src.api.api",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.api.api",
        "description": "src.api.api",
        "peekOfCode": "logger = logging.getLogger(\"v1\")\n@v1.on_event(\"startup\")\nasync def startup():\n    autostart = table_devices.search(devices.auto_start == True)\n    for device in autostart:\n        try:\n            await __start_device(device['name'])\n        except Exception as e:\n            logger.error(e)\n@v1.on_event(\"shutdown\")",
        "detail": "src.api.api",
        "documentation": {}
    }
]